const sampleModules = [
  {
    moduleId: 1,
    moduleName: 'Exercise: Recursion Review',
    keywords: ['exercise', 'recursion', 'review', 'sprint', 'recursive', 'pomander', 'mocha', 'chai', 'test', 'framework', 'requirements'],
    content: `<text>Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.\n\nConsider the following function:</text><codesnippet>var eat = function(meal){\n  console.log('meal before bite:', meal);\n  console.log('now eating', meal.pop());\n  if(meal.length){\n    eat(meal);\n  } else {\n    console.log('done with the meal!');\n  }\n}</codesnippet><text>Which produces this output:</text><codesnippet>eat(['soup', 'potatoes', 'fish']);\n// => meal before bite: ["soup", "potatoes", "fish"]\n// => now eating fish\n// => meal before bite: ["soup", "potatoes"]\n// => now eating potatoes\n// => meal before bite: ["soup"]\n// => now eating soup\n// => done with the meal!</codesnippet><text>You can use recursion on problems where smaller parts of the problem look the same as the larger problem as a whole.\n\nIn this sprint, you'll be reimplementing parts of the browser that involve recursion. In so doing, don't use the things you're reimplementing, or any other built-in shortcuts that make these problems trivial. (You'll probably know if you're cheating, but feel free to ask us if you're not sure.)\n\nIn this sprint, you'll be reimplementing parts of the browser that involve recursion. In so doing, don't use the things you're reimplementing, or any other built-in shortcuts that make these problems trivial. (You'll probably know if you're cheating, but feel free to ask us if you're not sure.)\n\n(Curious fact: many browsers don't have any of these functions in them, and people do need to reimplement them. When we reimplement new browser functionality in older browsers, it's called a "polyfill".)</text><title1>New for the Review Sprint</title1><title2>Review Sprint Repo</title2><text><b>The repo you will be working out of will be a different repo from Precourse.</b> Look on Github for <code>recursion-review</code> instead of <code>recursion</code>. Work on this from scratch and do not reference code from Precourse.</text><title2>Pomander</title2><text>To ensure your work is of the highest quality, we've created Pomander, a tool that checks your code for syntax errors and violations against the style guide before each commit.\n\nInstall it by navigating to this repository in Terminal and running the following command:</text><codesnippet>curl -s https://raw.githubusercontent.com/reactorcore/pomander/master/bin/install | bash</codesnippet><text>Pomander uses a pre-commit hook to run staged files through <code>eslint</code> before each commit. <code>eslint</code> is a linter that will block your commit should you have any syntax errors, or, should you violate the Hack Reactor style guide. There are some preferred whitespace style rules that will give warnings but not block your commit. If the linter gives you any funny bugs, these bugs are not intentional, and you should feel free to skip using it during commits with the <code>--no-verify</code> option.</text><title2>Broken Test</title2><text>To help you familiarize yourself with our favorite testing tools, Mocha and Chai, we've broken the test suite.\n\nMocha  is a test framework that provides the structure for test files, and is responsible for running tests and reporting their results. Mocha provides the it and describe global variables along with useful hooks like beforeEach.\n\nChai  is an assertion library that makes your tests more expressive and your error messages more helpful. Chai provides the expect function and various methods  that allow you to express your behavior in a human readable way.\n\nPay careful attention to the test files and fix them as necessary. Do not to refer back to the previous test suite, you would only be cheating yourself out of an important learning opportunity. Instead, use the Mocha and Chai documentation. You can do it!</text><title1>Bare minimum Requirements</title1><text>The files in the spec directory contain the test suites. Your goal is to fix any tests that are broken and then get them all to pass by implementing the missing functions in the src directory. To run all the tests, first run npm start in your terminal from the sprint's root directory. You'll know if this step completed successfully when you see the following output in your terminal:</text><codesnippet>Serving "/Users/.../your-sprint-folder" at http://127.0.0.1:xxxx</codesnippet><text>Now, navigate to the http://127.0.0.1:xxxx link in your browser (don't forget to include the colon and extra numbers at the end), and open the SpecRunner.html file.\n\nComplete the following tasks:</text><ul><li>Replace <code>stringifyJSON</code> with your own function in <code>src/stringifyJSON.js</code>, and make the specs pass, fixing them as necessary.</li>\n<li>Implement <code>getElementsByClassName</code> with your own function in <code>src/getElementsByClassName.js</code>, and make the specs pass, fixing them as necessary.</li></ul>`,
  },
  {
    moduleId: 2,
    moduleName: 'Exercise: Underbar Review',
    keywords: ['exercise', 'underbar', 'review', 'sprint', 'pomander', 'mocha', 'chai', 'test', 'framework', 'requirements'],
    content: `<text>This project was written in the same spirit as JavaScript Koans, and thusly uses the Mocha Test Suite to facilitate a TDD approach to learning. It walks you through a reimplementation of underscore.js, a popular collection of useful functions authored by Jeremy Ashkenas.</text><title1>New for the Review Sprint</title1><title2>Review Sprint Repo</title2><text><b>The repo you will be working out of will be a different repo from Precourse.</b> Look on Github for <code>underbar-review</code> instead of <code>underbar</code>. Work on this from scratch and do not reference code from Precourse.</text><title2>Pomander</title2><text>To ensure your work is of the highest quality, we've created Pomander, a tool that checks your code for syntax errors and violations against the style guide before each commit.\n\nInstall it by navigating to this repository in Terminal and running the following command:</text><codesnippet>curl -s https://raw.githubusercontent.com/reactorcore/pomander/master/bin/install | bash</codesnippet><text>Pomander uses a pre-commit hook to run staged files through <code>eslint</code> before each commit. <code>eslint</code> is a linter that will block your commit should you have any syntax errors, or, should you violate the Hack Reactor style guide. There are some preferred whitespace style rules that will give warnings but not block your commit. If the linter gives you any funny bugs, these bugs are not intentional, and you should feel free to skip using it during commits with the <code>--no-verify</code> option.</text><title2>Broken Test</title2><text>To help you familiarize yourself with our favorite testing tools, Mocha and Chai, we've broken the test suite.\n\nMocha  is a test framework that provides the structure for test files, and is responsible for running tests and reporting their results. Mocha provides the it and describe global variables along with useful hooks like beforeEach.\n\nChai  is an assertion library that makes your tests more expressive and your error messages more helpful. Chai provides the expect function and various methods  that allow you to express your behavior in a human readable way.\n\nPay careful attention to the test files and fix them as necessary. Do not to refer back to the previous test suite, you would only be cheating yourself out of an important learning opportunity. Instead, use the Mocha and Chai documentation. You can do it!</text><title1>Bare minimum Requirements</title1><text>As is, the repository is missing code for most of the functions. It's your job to fix the library by implementing them. The functions are split in two sections, with a separate test suite for each.\n\nThe files in the spec directory contain the test suites. Your goal is to fix any tests that are broken and then get them all to pass by implementing the missing functions in the src directory. To run all the tests, first run npm start in your terminal from the sprint's root directory. You'll know if this step completed successfully when you see the following output in your terminal:</text><codesnippet>Serving "/Users/.../your-sprint-folder" at http://127.0.0.1:xxxx</codesnippet><text>Now, navigate to the http://127.0.0.1:xxxx link in your browser (don't forget to include the colon and extra numbers at the end), and open the SpecRunner.html file.\n\nThe file src/underbar.js contains function definitions and explanations for the following functions (italicized functions are solved for you but contain broken tests). Implement each of the functions:</text><title2>Part I:</title2><ul><li>identity</li>\n<li><i><b>first</b></i></li>\n<li>last</li>\n<li>each</li>\n<li><i><b>indexOf</i></b></li>\n<li>filter</li>\n<li>reject</li>\n<li>uniq</li>\n<li>map</li>\n<li><i><b>pluck</i></b></li>\n<li>reduce</li></ul><title2>Part II:</title2><ul><li><i><b>contains</i></b></li>\n<li>every</li>\n<li>some</li>\n<li>extend</li>\n<li>defaults</li>\n<li><i><b>once</i></b></li>\n<li>memoize</li>\n<li>delay</li>\n<li>shuffle</li>\n</ul>`,
  },
  {
    moduleId: 3,
    moduleName: 'Welcome to Hack Reactor',
    keywords: ['program', 'hack', 'reactor', 'sprint', 'test', 'framework', 'requirements'],
    video: 'https://www.youtube.com/embed/SzckT9-rnrM',
    content: `<title2>Learning Objectives</title2><text>By the end of this lesson you will be able to:</text><ul><li>Learn who will supporting you during your time here</li>\n<li>Identify best practices for how to contact staff</li>\n<li>Describe the general schedule for the program duration</li>\n<li>Understand success metrics for the program</li></ul><title2>Slides</title2><ul><li><a href="https://docs.google.com/presentation/d/e/2PACX-1vQ3EcYmGL8vANpkLJBnd_Ox3_9YMpYdD1hzwY2ZHKWYI7fBQHrnupZQ0nCStNW_JkJG9XlAK24Gc4PK/embed?start=false&loop=false&delayms=3000&slide=id.g1445018543_0_36">Welcome to Hack Reactor</a></li></ul><title2>Video</title2>`,
  },
];

module.exports = sampleModules;